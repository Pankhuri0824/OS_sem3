The problem can arise at a deadlock when all the philosophers go to eat at the same time. For example the philospher 1 reaches for the fork 1 at the same time philospher 2 reaches for the fork 2 and so forth for all the philosphers. In this case no philsopher will be able to eat and free the fork they have hence a deadlock. (Let's call this deadlock situation).
The solution avoids the deadlock by changing the order in which philsopher 5 reaches for their fork. Philosopher 1, Philosopher 2, Philosopher 3 and Philosopher 4 reaches for the fork on their right first and the philospher 5 reaches for the fork on left first. With this solution there won't be a deadlock because in case of deadlock-situation, fork 1, fork 2 , fork 3 and fork 4 would get occupied and then philosopher 5 will try to go get fork 4 but won't be able to get it as it is already occupied by philosopher 4, it will wait and then all the other philsophers will eat in order and then philospher 5 will occupy fork 4 and fork 5 and eat.
It is a fair system as all the philosphers will get their turn to eat in the order the philospher thread is scheduled by the scheduler.  